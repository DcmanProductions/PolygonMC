@page "/"
@using Chase.Minecraft.Authentication;
@using Chase.Minecraft.Model;
@using PolygonMC.Data;
@using PolygonMC.Shared.Components;
@inject NavigationManager Navigation


@if (IsLoggingInExternally)
{
    <LoadingComponent Title="Continue in browser..." Message="A browser window should have open with a prompt to login."></LoadingComponent>
}
@if (IsLoading)
{
    <LoadingComponent Title="Loading..."></LoadingComponent>
}

@if (IsAuthenticated)
{
    Navigation.NavigateTo("/instances");
}

<link rel="stylesheet" href="/css/welcome.css">

<div class="col center horizontal vertical" id="minecraft-login">
    <img id="minecraft-logo" src="\images\minecraft-logo.svg" alt="">

    <div class="buttons center horizontal vertical col">
        <button id="microsoft-login" class="primary button fill big" @onclick="Login">microsoft login</button>
        <button id="offline-login" class="primary button fill big" @onclick="LoginOffline">offline</button>
    </div>
    <a href="https://minecraft.net" class="external" title="Go to Minecraft's website'">Create a new Minecraft account</a>
</div>

<Alert Message="This software is a not associated with Mojang or Microsoft"></Alert>

@code {
    private bool IsLoggingInExternally { get; set; }
    private bool IsLoading { get; set; }

    protected override Task OnInitializedAsync()
    {
        IsLoading = true;
        StateHasChanged();

        return base.OnInitializedAsync().ContinueWith(task =>
        {
            Task.Run(async () =>
            {
                if (File.Exists(MSAFile))
                {
                    string? auth = await MicrosoftAuthentication.GetMinecraftBearerAccessToken(MinecraftClientID, MicrosoftRedirectURI, MSAFile, true);
                    if (auth != null)
                    {
                        IsAuthenticated = true;
                        AuthenticationToken = auth;
                        Navigation.NavigateTo("/instances");
                    }
                }
                IsLoading = false;
                StateHasChanged();
            });
        });
    }

    private Task Login()
    {
        IsLoggingInExternally = true;
        StateHasChanged();
        return Task.Run(async () =>
        {
            string? token = await MicrosoftAuthentication.GetMinecraftBearerAccessToken(MinecraftClientID, MicrosoftRedirectURI, MSAFile, html: File.ReadAllText(Path.Combine(ApplicationDirectory, "wwwroot", "successfully-logged-in.html")));
            AuthenticationToken = token;
            UserProfile? user = await MicrosoftAuthentication.GetUserProfile(token);
            if (user != null)
            {
                Configuration.Instance.Profile = (UserProfile)user;
                Configuration.Instance.Username = user.Value.Name;
            }
            Configuration.Instance.Save();
            IsLoggingInExternally = false;
            Navigation.NavigateTo("/instances");
        });
    }

    private void LoginOffline()
    {
        Navigation.NavigateTo("/login/offline");
    }
}