@page "/instances/create"
@using Chase.Minecraft.Controller;
@using Chase.Minecraft.Data;
@using Chase.Minecraft.Fabric;
@using Chase.Minecraft.Forge;
@using Chase.Minecraft.Instances;
@using Chase.Minecraft.Model;
@using Chase.Minecraft;
@using Chase.Minecraft.Model.Resources;
@using Chase.Minecraft.Modrinth.Controller;
@using Chase.Minecraft.Modrinth.Model;
@using Chase.Minecraft.Modrinth;
@using PolygonMC.Data;
@using PolygonMC.Shared.Components
@using PolygonMC.Pages.Instances.Discover;

<link href="/css/create-instance.css" rel="stylesheet" />
<link href="/css/resource-item.css" rel="stylesheet" />
<Navigation SelectedPage="0" />

@if (LoadedResourceItemPage == null)
{

    <div id="page-content">
        <link rel="stylesheet" href="/css/instances.css">

        <div class="col" style="max-height: 96vh;">

            <div class="page-title row center horizontal">
                <span class="fill">Create Instance</span>
                <div class="row">
                    <a href="/discover" class="button secondary">Discover More</a>
                    <span>All settings can be changed later</span>
                </div>
            </div>

            @if (IsLoading)
            {
                <span class="loading"></span>
            }

            @switch (Tab)
            {
                default:
                case 0:
                    <div id="create-instance-form" class="col">
                        <div class="row">
                            <ImageInputComponent />
                            <div class="col fill">
                                <input type="text" id="name-input" name="name-input" placeholder="Instance Name" @bind=Model.Name tabindex="0" autofocus>
                                <textarea type="text" id="description-input" name="description-input" placeholder="Instance Description" @bind=Model.Description></textarea>
                            </div>
                        </div>
                        <InteractableListComponent Name="Minecraft Versions" Items=MinecraftVersions OnItemSelect="async item=>{SelectedMinecraftVersion=item;await SelectModLoader(SelectedModloaderVersionCategory);StateHasChanged();}" Categories=MinecraftVersionCategories OnCategorySelect="async item=>{await SelectMinecraftVersionCategory(item);}" SelectedCategory=@SelectedMinecraftVersionCategory SelectedItem=@SelectedMinecraftVersion />
                        @if (!string.IsNullOrWhiteSpace(SelectedMinecraftVersion))
                        {

                            @if (Version.TryParse(SelectedMinecraftVersion, out Version mcVersion) && mcVersion >= new Version(1, 14))
                            {
                                if (SelectedMinecraftVersionCategory == "snapsnot")
                                {
                                    <InteractableListComponent Name="Modloader Versions" Items=ModLoaderVersions OnCategorySelect=@(async item=>{await SelectModLoader("fabric");}) OnItemSelect="item=>{SelectedModloaderVersion=item;StateHasChanged();}" SelectedCategory="fabric" SelectedItem=@SelectedModloaderVersion />
                                }
                                else
                                {
                                    <InteractableListComponent Name="Modloader Versions" Items=ModLoaderVersions Categories=ModLoaderCategories OnCategorySelect="async item=>{await SelectModLoader(item);}" OnItemSelect="item=>{SelectedModloaderVersion=item;StateHasChanged();}" SelectedCategory=@SelectedModloaderVersionCategory SelectedItem=@SelectedModloaderVersion />
                                }
                            }
                            else
                            {
                                <InteractableListComponent Name="Modloader Versions" Items=ModLoaderVersions OnCategorySelect=@(async item=>{await SelectModLoader("forge");}) OnItemSelect="item=>{SelectedModloaderVersion=item;StateHasChanged();}" SelectedCategory=@SelectedModloaderVersionCategory SelectedItem=@SelectedModloaderVersion />
                            }
                        }
                        <details class="col fill">
                            <summary>Advanced Settings</summary>
                            <div class="row">
                                <div id="screen-size-input" class="col fill">
                                    <h4>Window Size</h4>
                                    <label for="screen-width">Width:</label>
                                    <input type="number" id="screen-width" placeholder="@Model.WindowWidth" @bind=Model.WindowWidth>
                                    <label for="screen-height">Height:</label>
                                    <input type="number" id="screen-height" placeholder="@Model.WindowHeight" @bind=Model.WindowHeight>
                                </div>
                                <div id="java-settings" class="col fill">
                                    <h4>Java Settings</h4>
                                    <label for="min-ram">Minimum RAM (MB):</label>
                                    <input type="number" id="min-ram" @bind=Model.RAM.Minimum>
                                    <label for="max-ram">Maximum RAM (MB):</label>
                                    <input type="number" id="max-ram" @bind=Model.RAM.Maximum>
                                </div>
                            </div>
                            <label for="java-args">Additional Java Arguments</label>
                            <textarea name="java-args"></textarea>
                            <label for="minecraft-args">Additional Minecraft Arguments</label>
                            <textarea name="minecraft-args"></textarea>
                        </details>
                    </div>
                    break;
                case 1:
                    <ModResourceComponent MinecraftVersion=@SelectedMinecraftVersion ModloaderVersion=@SelectedModloaderVersion Modloader=@((ModLoaders)Enum.Parse(typeof(ModLoaders), SelectedModloaderVersionCategory, true)) OnClick=@(r=>{LoadedResourceItemPage=r;StateHasChanged();}) OnModVersionSelected=@(mod=>InstalledMods.Add(mod)) InstalledModIds=@(InstalledMods.Select(i=>i.ProjectID).ToArray()) />
                    break;
                case 2:
                    <ResourcepackResourceComponent MinecraftVersion=@SelectedMinecraftVersion OnClick=@(r=>{LoadedResourceItemPage=r;StateHasChanged();}) />
                    break;
                case 3:
                    <ShaderpackResourceComponent MinecraftVersion=@SelectedMinecraftVersion OnClick=@(r=>{LoadedResourceItemPage=r;StateHasChanged();}) />
                    break;
                case 4:
                    break;
            }

        </div>
        <div class="bottom-nav row alert center horizontal">
            <div class="nav-item @(Tab == 0 ?"selected":"")" @onclick="()=>Tab=0"><i class="fa fa-solid fa-sliders"></i>Settings</div>
            @if (!string.IsNullOrWhiteSpace(SelectedModloaderVersion))
            {
                <div class="nav-item @(Tab == 1 ?"selected":"")" @onclick="()=>Tab=1"><i class="fa fa-solid fa-mortar-pestle"></i>Mods</div>
            }
            <div class="nav-item @(Tab == 2 ?"selected":"")" @onclick="()=>Tab=2"><i class="fa fa-solid fa-box"></i>Resource Packs</div>
            <div class="nav-item @(Tab == 3 ?"selected":"")" @onclick="()=>Tab=3"><i class="fa fa-solid fa-wand-sparkles"></i>Shader Packs</div>
            <div class="nav-item @(Tab == 4 ?"selected":"")" @onclick="()=>Tab=4"><i class="fa fa-solid fa-check-circle"></i>Finalize</div>
        </div>
    </div>
}
else
{
    ProjectTypes type = ProjectTypes.Mod;
    Type loadedType = LoadedResourceItemPage.GetType();

    if (loadedType.Equals(typeof(Mod)))
    {
        type = ProjectTypes.Mod;
    }
    else if (loadedType.Equals(typeof(ResourcePack)))
    {
        type = ProjectTypes.Resourcepack;
    }
    else if (loadedType.Equals(typeof(ShaderPack)))
    {
        type = ProjectTypes.Shader;
    }
    else if (loadedType.Equals(typeof(Modpack)))
    {
        type = ProjectTypes.Modpack;
    }
    else if (loadedType.Equals(typeof(Datapack)))
    {
        type = ProjectTypes.Datapack;
    }
    else if (loadedType.Equals(typeof(World)))
    {
        type = ProjectTypes.World;
    }
    else if (loadedType.Equals(typeof(Plugins)))
    {
        type = ProjectTypes.Plugins;
    }

    <ProductPage IsPopup="true" MinecraftVersion=@SelectedMinecraftVersion OnModVersionSelected=@(mod=>InstalledMods.Add(mod)) OnClose=@(()=>{ LoadedResourceItemPage=null;StateHasChanged(); }) Source=@((PlatformSource)LoadedResourceItemPage?.Platform) Id=@LoadedResourceItemPage?.ID PageURL=@(LoadedResourceItemPage.Website) Type=@( type ) />
}

@code {

    private int Tab = 0;
    private bool IsLoading { get; set; } = true;
    private InstanceModel Model { get; set; } = new();
    private string[] MinecraftVersions { get; set; } = Array.Empty<string>();
    private string[] ModLoaderVersions { get; set; } = Array.Empty<string>();
    private string SelectedMinecraftVersion { get; set; } = "";
    private string SelectedModloaderVersion { get; set; } = "";
    private string[] ModLoaderCategories { get; set; } = new string[] { "fabric", "forge" };
    private string[] MinecraftVersionCategories { get; set; } = new string[] { "release", "snapshot" };
    private string SelectedMinecraftVersionCategory { get; set; } = "release";
    private string SelectedModloaderVersionCategory { get; set; } = "forge";
    private string JavaArguments = "";
    private string MinecraftArguments = "";
    private ResourceItemBase LoadedResourceItemPage { get; set; } = null;
    private List<ModModel> InstalledMods = new();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = false;
        await SelectMinecraftVersionCategory(MinecraftVersionCategories.First());
        await base.OnInitializedAsync();

    }

    private async Task Create()
    {
        IsLoading = true;
        await JavaController.DownloadJava(JavaDirectory);
        Model.MinecraftVersion = MinecraftVersionController.GetMinecraftVersionByName(SelectedMinecraftVersion).Value;
        ModLoaders modLoader = ModLoaders.None;
        if (!string.IsNullOrWhiteSpace(SelectedModloaderVersion) && Enum.TryParse(typeof(ModLoaders), SelectedModloaderVersionCategory, true, out object? loader))
        {
            modLoader = (ModLoaders)loader;
            Model.ModLoader = new()
                {
                    Modloader = modLoader,
                    Version = SelectedModloaderVersion
                };
        }

        Model.JVMArguments = JavaArguments.Split(" ");
        Model.MinecraftArguments = MinecraftArguments.Split(" ");

        Model = CurrentInstanceManager.Create(Model);

        switch (modLoader)
        {
            case ModLoaders.Fabric:
                await FabricLoader.Install(SelectedModloaderVersion, Model);
                break;
            case ModLoaders.Forge:
                await ForgeLoader.Install(SelectedModloaderVersion, Model, ConfigurationController.Instance.WorkingDirectory, JavaController.GetLocalJVMInstallations(JavaDirectory).Latest);
                break;
        }
        Model.Mods = InstalledMods.ToArray();
        InstanceManager.ReDownloadMods(Model);
    }

    private async Task SelectMinecraftVersionCategory(string category)
    {
        SelectedMinecraftVersionCategory = category;
        MinecraftVersions = (await MinecraftVersionController.GetMinecraftVersionManifestAsync())?.Versions.Where(i => i.Type.Equals(category, StringComparison.OrdinalIgnoreCase)).Select(i => i.ID).ToArray();
        StateHasChanged();
    }

    private async Task SelectModLoader(string category)
    {
        SelectedModloaderVersionCategory = category;
        ModLoaderVersions = Array.Empty<string>();
        switch (category)
        {
            case "fabric":
                ModLoaderVersions = await FabricLoader.GetLoaderVersions();
                break;
            case "forge":
                if (!string.IsNullOrWhiteSpace(SelectedMinecraftVersion))
                {
                    ModLoaderVersions = await ForgeLoader.GetLoaderVersions(SelectedMinecraftVersion);
                }
                break;
        }
        StateHasChanged();
    }

}