@page "/instances/create"
@using Chase.Minecraft.Controller;
@using Chase.Minecraft.Data;
@using Chase.Minecraft.Fabric;
@using Chase.Minecraft.Forge;
@using Chase.Minecraft.Model;
@using Chase.Minecraft;
@using Chase.Minecraft.Modrinth.Controller;
@using Chase.Minecraft.Modrinth.Model;
@using Chase.Minecraft.Modrinth;
@using PolygonMC.Data;
@using PolygonMC.Shared.Components

<link href="/css/create-instance.css" rel="stylesheet" />
<Navigation SelectedPage="0" />

<div id="page-content">
    <link rel="stylesheet" href="/css/instances.css">

    <div class="col" style="max-height: 96vh;">

        <div class="page-title row center horizontal">
            <span class="fill">Create Instance</span>
            <div class="row">
                <a href="/discover" class="button secondary">Discover More</a>
                <span>All settings can be changed later</span>
            </div>
        </div>

        @if (IsLoading)
        {
            <span class="loading"></span>
        }
        @switch (Tab)
        {
            default:
            case 0:
                <div id="create-instance-form" class="col">
                    <div class="row">
                        <ImageInputComponent />
                        <div class="col fill">
                            <input type="text" id="name-input" name="name-input" placeholder="Instance Name" @bind=Model.Name tabindex="0" autofocus>
                            <textarea type="text" id="description-input" name="description-input" placeholder="Instance Description" @bind=Model.Description></textarea>
                        </div>
                    </div>
                    <InteractableListComponent Name="Minecraft Versions" Items=MinecraftVersions OnItemSelect="async item=>{SelectedMinecraftVersion=item;await SelectModLoader(SelectedModloaderVersionCategory);StateHasChanged();}" Categories=MinecraftVersionCategories OnCategorySelect="async item=>{await SelectMinecraftVersionCategory(item);}" SelectedCategory=@SelectedMinecraftVersionCategory />
                    @if (!string.IsNullOrWhiteSpace(SelectedMinecraftVersion))
                    {

                        @if (Version.TryParse(SelectedMinecraftVersion, out Version mcVersion) && mcVersion >= new Version(1, 14))
                        {
                            if (SelectedMinecraftVersionCategory == "snapsnot")
                            {
                                <InteractableListComponent Name="Modloader Versions" Items=ModLoaderVersions OnCategorySelect=@(async item=>{await SelectModLoader("fabric");}) OnItemSelect="item=>{SelectedModloaderVersion=item;StateHasChanged();}" SelectedCategory="fabric" />
                            }
                            else
                            {
                                <InteractableListComponent Name="Modloader Versions" Items=ModLoaderVersions Categories=ModLoaderCategories OnCategorySelect="async item=>{await SelectModLoader(item);}" OnItemSelect="item=>{SelectedModloaderVersion=item;StateHasChanged();}" SelectedCategory=@SelectedModloaderVersionCategory />
                            }
                        }
                        else
                        {
                            <InteractableListComponent Name="Modloader Versions" Items=ModLoaderVersions OnCategorySelect=@(async item=>{await SelectModLoader("forge");}) OnItemSelect="item=>{SelectedModloaderVersion=item;StateHasChanged();}" SelectedCategory=@SelectedModloaderVersionCategory />
                        }
                    }
                    <details class="col fill">
                        <summary>Advanced Settings</summary>
                        <div class="row">
                            <div id="screen-size-input" class="col fill">
                                <h4>Window Size</h4>
                                <label for="screen-width">Width:</label>
                                <input type="number" id="screen-width" placeholder="@Model.WindowWidth" @bind=Model.WindowWidth>
                                <label for="screen-height">Height:</label>
                                <input type="number" id="screen-height" placeholder="@Model.WindowHeight" @bind=Model.WindowHeight>
                            </div>
                            <div id="java-settings" class="col fill">
                                <h4>Java Settings</h4>
                                <label for="min-ram">Minimum RAM (MB):</label>
                                <input type="number" id="min-ram" @bind=Model.RAM.MinimumRamMB>
                                <label for="max-ram">Maximum RAM (MB):</label>
                                <input type="number" id="max-ram" @bind=Model.RAM.MaximumRamMB>
                            </div>
                        </div>
                        <label for="java-args">Additional Java Arguments</label>
                        <textarea name="java-args"></textarea>
                        <label for="minecraft-args">Additional Minecraft Arguments</label>
                        <textarea name="minecraft-args"></textarea>
                    </details>
                </div>
                break;
            case 1:
                <div class="col">
                    <div class="row">
                        <h2 class="fill">Mods</h2>
                        <div id="source-dropdown" class="dropdown" tabindex="0">
                            <div class="value">@Source</div>
                            <div class="dropdown-items">
                                @foreach (PlatformSource source in Enum.GetValues(typeof(PlatformSource)))
                                {
                                    @if (source != PlatformSource.Unknown)
                                    {
                                        <div class="dropdown-item @(Source==source?"selected":"")" @onclick="() => Source=source">@source</div>
                                    }
                                }
                            </div>
                        </div>
                        <div id="limit-dropdown" class="dropdown" tabindex="0">
                            <div class="value">@ItemsPerPage</div>
                            <div class="dropdown-items">
                                <div class="dropdown-item @(ItemsPerPage==10?"selected":"")" @onclick="() => ItemsPerPage=10">10</div>
                                <div class="dropdown-item @(ItemsPerPage==25?"selected":"")" @onclick="() => ItemsPerPage=25">25</div>
                                <div class="dropdown-item @(ItemsPerPage==30?"selected":"")" @onclick="() => ItemsPerPage=30">30</div>
                                <div class="dropdown-item @(ItemsPerPage==50?"selected":"")" @onclick="() => ItemsPerPage=50">50</div>
                                <div class="dropdown-item @(ItemsPerPage==100?"selected":"")" @onclick="() => ItemsPerPage=100">100</div>
                            </div>
                        </div>
                    </div>
                    <div class="col fill">
                        @if (Source == PlatformSource.Modrinth)
                        {
                            foreach (ModrinthSearchResultItem resource in ModrinthSearchResult)
                            {
                                <ResourceItemComponent Name=@resource.Title Description=@resource.Description Author=@resource.Author Downloads=resource.Downloads Icon=@resource.IconUrl Background=@resource.FeaturedGallery IsDownloaded />
                            }
                        }
                    </div>
                </div>
                break;
            case 2:
                break;
            case 3:
                break;
            case 4:
                break;
        }

    </div>
    <div class="bottom-nav row alert center horizontal">
        <div class="nav-item @(Tab == 0 ?"selected":"")" @onclick="()=>Tab=0"><i class="fa fa-solid fa-sliders"></i>Settings</div>
        @if (!string.IsNullOrWhiteSpace(SelectedModloaderVersion))
        {
            <div class="nav-item @(Tab == 1 ?"selected":"")" @onclick="()=>Tab=1"><i class="fa fa-solid fa-mortar-pestle"></i>Mods</div>
        }
        <div class="nav-item @(Tab == 2 ?"selected":"")" @onclick="()=>Tab=2"><i class="fa fa-solid fa-box"></i>Resource Packs</div>
        <div class="nav-item @(Tab == 3 ?"selected":"")" @onclick="()=>Tab=3"><i class="fa fa-solid fa-wand-sparkles"></i>Shader Packs</div>
        <div class="nav-item @(Tab == 4 ?"selected":"")" @onclick="()=>Tab=4"><i class="fa fa-solid fa-check-circle"></i>Finalize</div>
    </div>
</div>

@code {

    private int Tab = 0;
    private bool IsLoading { get; set; } = true;
    private InstanceModel Model { get; set; } = new();
    private string[] MinecraftVersions { get; set; } = Array.Empty<string>();
    private string[] ModLoaderVersions { get; set; } = Array.Empty<string>();
    private string SelectedMinecraftVersion { get; set; } = "";
    private string SelectedModloaderVersion { get; set; } = "";
    private string[] ModLoaderCategories { get; set; } = new string[] { "fabric", "forge" };
    private string[] MinecraftVersionCategories { get; set; } = new string[] { "release", "snapshot" };
    private string SelectedMinecraftVersionCategory { get; set; } = "release";
    private string SelectedModloaderVersionCategory { get; set; } = "forge";
    private string JavaArguments = "";
    private string MinecraftArguments = "";
    private ResourceItemComponent[] Mods { get; set; } = Array.Empty<ResourceItemComponent>();
    private PlatformSource Source { get; set; } = Configuration.Instance.DefaultPlatform;
    private int ItemsPerPage { get; set; } = 10;
    private string SearchQuery { get; set; } = "";
    ModrinthSearchResultItem[] ModrinthSearchResult { get; set; } = Array.Empty<ModrinthSearchResultItem>();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = false;
        await SelectMinecraftVersionCategory(MinecraftVersionCategories.First());
        await base.OnInitializedAsync();

    }

    private async Task Create()
    {
        IsLoading = true;
        await JavaController.DownloadJava(JavaDirectory);
        Model.MinecraftVersion = MinecraftVersionController.GetMinecraftVersionByName(SelectedMinecraftVersion).Value;
        ModLoaders modLoader = ModLoaders.None;
        if (!string.IsNullOrWhiteSpace(SelectedModloaderVersion) && Enum.TryParse(typeof(ModLoaders), SelectedModloaderVersionCategory, true, out object? loader))
        {
            modLoader = (ModLoaders)loader;
            Model.ModLoader = new()
                {
                    Modloader = modLoader,
                    Version = SelectedModloaderVersion
                };
        }

        Model.JVMArguments = JavaArguments.Split(" ");
        Model.MinecraftArguments = MinecraftArguments.Split(" ");

        Model = InstanceManager.Create(Model);

        switch (modLoader)
        {
            case ModLoaders.Fabric:
                await FabricLoader.Install(SelectedModloaderVersion, Model);
                break;
            case ModLoaders.Forge:
                await ForgeLoader.Install(SelectedModloaderVersion, Model, Configuration.Instance.WorkingDirectory, JavaController.GetLocalJVMInstallations(JavaDirectory).Latest);
                break;
        }
    }

    private async Task SelectMinecraftVersionCategory(string category)
    {
        SelectedMinecraftVersionCategory = category;
        MinecraftVersions = (await MinecraftVersionController.GetMinecraftVersionManifestAsync())?.Versions.Where(i => i.Type.Equals(category, StringComparison.OrdinalIgnoreCase)).Select(i => i.ID).ToArray();
        StateHasChanged();
    }

    private async Task SelectModLoader(string category)
    {
        SelectedModloaderVersionCategory = category;
        ModLoaderVersions = Array.Empty<string>();
        switch (category)
        {
            case "fabric":
                ModLoaderVersions = await FabricLoader.GetLoaderVersions();
                break;
            case "forge":
                if (!string.IsNullOrWhiteSpace(SelectedMinecraftVersion))
                {
                    ModLoaderVersions = await ForgeLoader.GetLoaderVersions(SelectedMinecraftVersion);
                }
                break;
        }
        StateHasChanged();
    }

    private async Task LoadMods()
    {
        await Task.Run(async () =>
        {
            if (Source == PlatformSource.Modrinth)
            {
                if (SelectedMinecraftVersionCategory == "release")
                {
                    Version version = Version.Parse(SelectedMinecraftVersion);
                    ModLoaders loader = (ModLoaders)Enum.Parse(typeof(ModLoaders), SelectedModloaderVersionCategory);
                    MinecraftVersionManifest? manifest = await MinecraftVersionController.GetMinecraftVersionManifestAsync();
                    string[] versions = manifest.Value.Versions.Select(i => i.ID).Where(i =>
                                    {
                                        if (Version.TryParse(i, out Version v))
                                        {
                                            return v.Major == version.Major && v.Minor == version.Minor;
                                        }
                                        return false;
                                    }).ToArray();

                    using ModrinthClient client = new();
                    FacetBuilder facets = new FacetBuilder()
                    .AddVersions(versions)
                    .AddModloaders(loader)
                    .AddProjectTypes(Chase.Minecraft.Modrinth.Data.ModrinthProjectTypes.Mod);

                    ModrinthSearchQuery query = new()
                        {
                            Limit = ItemsPerPage,
                            Facets = facets,
                            Query = SearchQuery,
                        };
                    ModrinthSearchResult? result = await client.SearchAsync(query);
                    if (result != null && result.HasValue)
                    {
                        ModrinthSearchResult = result.Value.Hits;
                    }
                }
            }
            else if (Source == PlatformSource.Curseforge)
            {

            }
        });
    }
    private Task AddModrinthMod(string id) => Task.Run(async () =>
    {

        using ModrinthClient client = new();
        var versions = await client.GetProjectVersionsAsync(id);
    });
}