@using Chase.Minecraft.Curseforge.Controller;
@using Chase.Minecraft.Curseforge.Model;
@using Chase.Minecraft.Data;
@using Chase.Minecraft.Modrinth.Controller;
@using Chase.Minecraft.Modrinth.Model;
@using PolygonMC.Data;
@using PolygonMC.Shared.Components
@using Markdig;

<link rel="stylesheet" href="/css/product-page.css">
<link rel="stylesheet" href="/css/gallery.css">

<Navigation SelectedPage="1"></Navigation>

@if (IsPopup)
{
    <button class="button secondary" @onclick=@(() => OnClose.Invoke()) style="position: fixed;right: 2rem;"><i class="fa fa-x"></i></button>
}

<div id="page-content">

    @if (IsLoading)
    {
        <span class="loading"></span>
    }
    else
    {
        <h1>@Name</h1>

        <div class="row">
            @switch (Tab)
            {
                case 0:
                    <div id="description" class="col fill">
                        @(new MarkupString(Body ?? ""))
                    </div>
                    break;
                case 1:
                    <div id="gallery-items" class="grid product-content">
                        @foreach (var gallery in Images)
                        {
                            <GalleryItem Title=@(gallery.Title) Description=@(gallery.Description) Image=@(gallery.Url) />
                        }
                    </div>
                    break;
            }
            <div id="side-bar" class="col">
                <div class="row">
                    <div id="banner-image" style="background-image: url('@FeaturedImageUrl')"></div>
                    <img id="icon" src="@IconUrl" alt="">
                    <div id="page-title-info" class="col">
                        <p id="title">@Name</p>
                        <p id="type">@Type</p>
                    </div>
                </div>
                <p id="summery">@Description</p>
                <p id="downloads"> <i class="fa-solid fa-download"></i> <b>@Downloads</b> Downloads</p>
                <p id="followers"> <i class="fa-solid fa-heart"></i> <b>@Followers</b> Followers</p>

                <a href="@PageURL" class="button fill">View on @Source</a>

            </div>
        </div>
    }


    <div class="bottom-nav row alert center horizontal">
        <div class="nav-item @(Tab == 0 ?"selected":"")" @onclick="()=>Tab=0"><i class="fa-solid fa-bar-chart"></i>Overview</div>
        @if (Images != null && Images.Any())
        {
            <div class="nav-item @(Tab == 1 ?"selected":"")" @onclick="()=>Tab=1"><i class="fa-solid fa-images"></i>Gallery</div>
        }
        <div class="nav-item @(Tab == 2 ?"selected":"")" @onclick="()=>Tab=2"><i class="fa-solid fa-file-zipper"></i>Versions</div>
    </div>
</div>
@code {
    private bool IsLoading { get; set; } = true;
    public string FeaturedImageUrl { get; set; } = "";

    private string Name { get; set; }
    private string Description { get; set; }
    private string Body { get; set; }
    private string Type { get; set; }
    private int Downloads { get; set; }
    private int Followers { get; set; }
    private string IconUrl { get; set; }
    private int Tab { get; set; } = -1;

    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Source { get; set; }
    [Parameter]
    public string PageURL { get; set; }
    [Parameter]
    public Chase.Minecraft.Modrinth.Model.GalleryItem[] Images { get; set; } = Array.Empty<Chase.Minecraft.Modrinth.Model.GalleryItem>();
    [Parameter]
    public bool IsPopup { get; set; } = true;
    [Parameter]
    public Action OnClose { get; set; } = () => { };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Tab = 0;
        await Refresh();
    }


    private async Task Refresh()
    {
        IsLoading = true;
        if (Enum.TryParse(typeof(PlatformSource), Source, true, out object tmp))
        {
            PlatformSource platform = (PlatformSource)tmp;
            switch (platform)
            {
                case PlatformSource.Modrinth:
                    using (ModrinthClient client = new())
                    {
                        ModrinthProject? project = await client.GetProjectAsync(Id);
                        if (project != null)
                        {
                            Name = project.Value.Title;
                            Body = project.Value.Body;
                            Downloads = project.Value.Downloads;
                            Followers = project.Value.Followers;
                            IconUrl = project.Value.IconUrl;
                            Images = project.Value.Gallery;
                            Description = project.Value.Description;
                            if (project.Value.Gallery.Any(i => i.Featured))
                            {
                                FeaturedImageUrl = project.Value.Gallery.First(i => i.Featured).Url;
                            }
                            IsLoading = false;
                        }
                    }
                    break;
                case PlatformSource.Curseforge:
                    using (CurseforgeClient client = new(CurseForgeAPI))
                    {
                        CurseforgeProject? project = null;
                        switch (Type)
                        {
                            case "mod":
                                project = await client.GetMod(Id);
                                break;
                            case "modpack":
                                project = await client.GetModpack(Id);
                                break;
                            case "world":
                                project = await client.GetWorld(Id);
                                break;
                            case "resourcepack":
                                project = await client.GetResourcepack(Id);
                                break;
                        }
                        if (project != null)
                        {
                            Name = project.Value.Name;
                            Downloads = project.Value.DownloadCount;
                            Description = "";
                            Followers = 0;
                            IconUrl = project.Value.Logo.Url;
                            Images = Array.ConvertAll(project.Value.Screenshots, i =>
                            {
                                return new Chase.Minecraft.Modrinth.Model.GalleryItem()
                                    {
                                        Title = i.Title,
                                        Description = i.Description,
                                        Url = i.Url,
                                        Created = DateTime.Now.ToString(),
                                        Featured = false,
                                        Ordering = 0,
                                    };
                            }).ToArray();

                            if (Images.Any(i => i.Featured))
                            {
                                FeaturedImageUrl = Images.First().Url;
                            }
                            IsLoading = false;
                        }
                    }
                    break;
            }
        }
    }

}
